import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

#using apple here indian markets ke liye data hi nahi millta
stock = yf.download('AAPL', start='2020-01-01', end='2024-01-01')

# Preprocess data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(stock['Close'].values.reshape(-1,1))

train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size:]

def create_dataset(data, time_step=50):
    X, Y = [], []
    for i in range(len(data) - time_step - 1):
        X.append(data[i:(i + time_step), 0])
        Y.append(data[i + time_step, 0])
    return np.array(X), np.array(Y)

X_train, Y_train = create_dataset(train_data)
X_test, Y_test = create_dataset(test_data)

X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# LSTM Moddddel
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(50, 1)),
    LSTM(50, return_sequences=False),
    Dense(25),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, Y_train, epochs=10, batch_size=32)

# Prediction 
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# graph Plot results
plt.figure(figsize=(12,6))
plt.plot(stock.index[-len(Y_test):], scaler.inverse_transform(Y_test.reshape(-1,1)), label="Actual Price")
plt.plot(stock.index[-len(Y_test):], predictions, label="Predicted Price")
plt.legend()
plt.show()
